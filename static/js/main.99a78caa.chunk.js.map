{"version":3,"sources":["styles/Login.module.css","styles/Header.module.css","images/login-image.svg","images/payments_FILL0_wght400_GRAD0_opsz48.svg","styles/WalletForm.module.css","actions/index.js","pages/Login.js","components/EditForm.jsx","components/Header.jsx","components/WalletForm.jsx","components/WalletTable.jsx","pages/Wallet.js","App.js","serviceWorker.js","reducers/user.js","reducers/wallet.js","reducers/index.js","store/index.js","index.js"],"names":["module","exports","getExpenses","payload","type","getEmail","Login","isButtonDisabled","state","email","password","valideEmail","test","length","setState","isDisabled","handleChange","target","name","value","this","props","getUserEmail","history","className","styles","login","loginDiv","htmlFor","id","data-testid","placeholder","onChange","disabled","onClick","push","src","loginImage","alt","React","Component","connect","dispatch","EditForm","updateExpenses","currentEdit","updateExp","currency","method","tag","description","currencies","map","curr","key","wallet","exp","Header","updatedTotal","expenses","reduce","acc","currencyValue","Number","exchangeRates","ask","header","moneyIcon","userHeaderInfo","toFixed","user","WalletForm","fetchCurrATM","expensesInfo","mainForm","fetch","response","json","result","USDT","console","log","WalletTable","expenseRemover","editExp","expItem","removeExpense","Wallet","fetchCurrency","edit","App","exact","path","component","Boolean","window","location","hostname","match","INITIAL_STATE","rootReducer","combineReducers","action","Object","keys","filter","expense","store","createStore","reducer","composeWithDevTools","applyMiddleware","thunk","ReactDOM","render","basename","process","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.99a78caa.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"login\":\"Login_login__HBoD0\",\"loginDiv\":\"Login_loginDiv__1vKxR\",\"loginImage\":\"Login_loginImage__3dBgi\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"header\":\"Header_header__1fnJb\",\"userHeaderInfo\":\"Header_userHeaderInfo__20OUN\"};","module.exports = __webpack_public_path__ + \"static/media/login-image.dee3998e.svg\";","module.exports = __webpack_public_path__ + \"static/media/payments_FILL0_wght400_GRAD0_opsz48.11df69c5.svg\";","// extracted by mini-css-extract-plugin\nmodule.exports = {\"mainForm\":\"WalletForm_mainForm__LRQoe\"};","// Coloque aqui suas actions\nconst getEmail = (payload) => ({\n  type: 'GET_EMAIL', payload,\n});\n\nconst getCurrencies = (payload) => ({\n  type: 'GET_CURRENCIES', payload,\n});\n\nexport const getExpenses = (payload) => ({\n  type: 'GET_EXPENSES', payload,\n});\n\nexport const removeExpense = (id) => ({\n  type: 'REMOVE_EXPENSE', id,\n});\n\nexport const editExpense = (expItem) => ({\n  type: 'EDIT_EXPENSE', expItem,\n});\n\nexport const updateExpense = (payload) => ({\n  type: 'UPDATE_EXPENSE', payload,\n});\n\n// export const saveEdit = (expItem) => ({});\n\nexport function fetchCurrencies() {\n  return async (dispatch) => {\n    try {\n      const response = await fetch('https://economia.awesomeapi.com.br/json/all');\n      const result = await response.json();\n      dispatch(getCurrencies(result));\n    } catch (error) {\n      console.log(error);\n    }\n  };\n}\n\nexport function fetchCurrencyATM(payload) {\n  return async (dispatch) => {\n    try {\n      const response = await fetch('https://economia.awesomeapi.com.br/json/all');\n      const result = await response.json();\n      delete result.USDT;\n      dispatch(getExpenses({ ...payload, exchangeRates: result }));\n    } catch (error) {\n      console.log(error);\n    }\n  };\n}\n\nexport default getEmail;\n","import propTypes from 'prop-types';\nimport React from 'react';\nimport { connect } from 'react-redux';\nimport getEmail from '../actions';\nimport loginImage from '../images/login-image.svg';\nimport styles from '../styles/Login.module.css';\n\nclass Login extends React.Component {\n  constructor() {\n    super();\n    this.state = {\n      isDisabled: true,\n      email: '',\n      password: '',\n    };\n  }\n\n  isButtonDisabled = () => {\n    const { email, password } = this.state;\n\n    const regex = /[a-z0-9]+@[a-z]+\\.[a-z]{2,3}/;\n    const valideEmail = regex.test(email);\n\n    const FIVE = 5;\n    if (password.length > FIVE && valideEmail) {\n      this.setState({ isDisabled: false });\n    } else {\n      this.setState({ isDisabled: true });\n    }\n  }\n\n  handleChange = ({ target }) => {\n    const { name, value } = target;\n    this.setState({ [name]: value }, () => {\n      this.isButtonDisabled();\n    });\n  }\n\n  render() {\n    const { isDisabled, password, email } = this.state;\n    const { getUserEmail, history } = this.props;\n\n    return (\n      <section className={ styles.login }>\n\n        <div className={ styles.loginDiv}>\n          <form>\n            <h1>Faça seu login</h1>\n            <label htmlFor=\"email\">\n              Seu email\n            </label>\n            <input\n              id=\"email\"\n              type=\"text\"\n              data-testid=\"email-input\"\n              placeholder=\"seu-email@exemplo.com\"\n              name=\"email\"\n              value={ email }\n              onChange={ this.handleChange }\n            />\n            <label htmlFor=\"password\">\n              Senha\n            </label>\n            <input\n              id=\"password\"\n              type=\"password\"\n              data-testid=\"password-input\"\n              placeholder=\"digite sua senha\"\n              name=\"password\"\n              value={ password }\n              onChange={ this.handleChange }\n            />\n            <button\n              type=\"button\"\n              disabled={ isDisabled }\n              onClick={ () => {\n                getUserEmail(email);\n                history.push('/carteira');\n              } }\n            >\n              Entrar\n\n            </button>\n          </form>\n          <img src={loginImage} alt=\"login\" className= { styles.loginImage } />\n        </div>\n\n      </section>\n    );\n  }\n}\n\nconst mapDispatchToProps = (dispatch) => ({\n  getUserEmail: (email) => dispatch(getEmail(email)),\n});\n\nLogin.propTypes = {\n  getUserEmail: propTypes.func.isRequired,\n  history: propTypes.shape({\n    push: propTypes.func.isRequired,\n  }).isRequired,\n};\n\nexport default connect(null, mapDispatchToProps)(Login);\n","import React from 'react';\nimport propTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { updateExpense } from '../actions';\n\nclass EditForm extends React.Component {\n  constructor() {\n    super();\n    this.state = {\n      value: '',\n      currency: 'USD',\n      method: 'Dinheiro',\n      tag: 'Alimentação',\n      description: '',\n    };\n  }\n\n  componentDidMount() {\n    const { currentEdit } = this.props;\n    this.setState({\n      value: currentEdit.value,\n      currency: currentEdit.currency,\n      method: currentEdit.method,\n      tag: currentEdit.tag,\n      description: currentEdit.description,\n    });\n  }\n\n  handleChange = ({ target }) => {\n    const { name, value } = target;\n    this.setState({ [name]: value });\n  }\n\n  updateExpenses = () => {\n    const { currentEdit, updateExp } = this.props;\n    const newExpense = { ...currentEdit, ...this.state };\n    updateExp(newExpense);\n  }\n\n  render() {\n    const { currencies } = this.props;\n    const { value, currency, method, tag, description } = this.state;\n    // const expensesInfo = { value, description, currency, method, tag };\n    return (\n      <div>\n        <form>\n          <input\n            type=\"number\"\n            data-testid=\"value-input\"\n            placeholder=\"Valor da Despesa\"\n            onChange={ this.handleChange }\n            name=\"value\"\n            value={ value }\n          />\n\n          <label htmlFor=\"moeda\">\n            Moeda\n            <select\n              id=\"moeda\"\n              name=\"currency\"\n              value={ currency }\n              data-testid=\"currency-input\"\n              onChange={ this.handleChange }\n            >\n              { currencies.map((curr) => <option key={ curr }>{ curr }</option>) }\n            </select>\n          </label>\n\n          <select\n            data-testid=\"method-input\"\n            name=\"method\"\n            value={ method }\n            onChange={ this.handleChange }\n          >\n            <option>Dinheiro</option>\n            <option>Cartão de crédito</option>\n            <option>Cartão de débito</option>\n          </select>\n\n          <select\n            data-testid=\"tag-input\"\n            name=\"tag\"\n            value={ tag }\n            onChange={ this.handleChange }\n          >\n            <option>Alimentação</option>\n            <option>Lazer</option>\n            <option>Trabalho</option>\n            <option>Transporte</option>\n            <option>Saúde</option>\n          </select>\n          <input\n            type=\"text\"\n            data-testid=\"description-input\"\n            placeholder=\"Descrição\"\n            onChange={ this.handleChange }\n            name=\"description\"\n            value={ description }\n          />\n        </form>\n\n        <button\n          type=\"button\"\n          onClick={ () => {\n            this.updateExpenses();\n            this.setState({ value: '' });\n          } }\n        >\n          Editar despesa\n\n        </button>\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = (state) => ({\n  currencies: state.wallet.currencies,\n  currentEdit: state.wallet.currentEdit,\n});\n\nconst mapDispatchToProps = (dispatch) => ({\n  // fetchCurrATM: (expenses) => dispatch(fetchCurrencyATM(expenses)),\n  updateExp: (exp) => dispatch(updateExpense(exp)),\n});\n\nEditForm.propTypes = {\n  currencies: propTypes.arrayOf(propTypes.any).isRequired,\n  // fetchCurrATM: propTypes.func.isRequired,\n  currentEdit: propTypes.shape({\n    currency: propTypes.string,\n    description: propTypes.string,\n    exchangeRates: propTypes.objectOf(propTypes.object.isRequired),\n    id: propTypes.number,\n    method: propTypes.string,\n    tag: propTypes.string,\n    value: propTypes.string,\n  }).isRequired,\n  updateExp: propTypes.func.isRequired,\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(EditForm);\n","import React from 'react';\nimport { connect } from 'react-redux';\nimport propTypes from 'prop-types';\nimport styles from '../styles/Header.module.css';\nimport moneyIcon from '../images/payments_FILL0_wght400_GRAD0_opsz48.svg'\n\nclass Header extends React.Component {\n  render() {\n    const { email, expenses } = this.props;\n    const updatedTotal = expenses.reduce((acc, curr) => {\n      const currencyValue = Number(curr.exchangeRates[curr.currency].ask);\n      const spentValue = Number(curr.value) * currencyValue;\n      acc += spentValue;\n      return acc;\n    }, 0);\n    return (\n      <div className={ styles.header }>\n        <div>\n          <img src={ moneyIcon} alt='money icon' />\n        </div>\n        <div className= {styles.userHeaderInfo }>\n          <h3 data-testid=\"email-field\">{ `Email: ${email}` }</h3>\n          <p data-testid=\"total-field\">{ `Despesa Total: ${updatedTotal.toFixed(2)}` }</p>\n          <p data-testid=\"header-currency-field\">BRL</p>\n        </div>\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = (state) => ({\n  email: state.user.email,\n  expenses: state.wallet.expenses,\n});\n\nHeader.propTypes = {\n  email: propTypes.string.isRequired,\n  expenses: propTypes.arrayOf(propTypes.any).isRequired,\n};\n\nexport default connect(mapStateToProps)(Header);\n","import React from 'react';\nimport propTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { fetchCurrencyATM } from '../actions';\nimport styles from '../styles/WalletForm.module.css';\n\nclass WalletForm extends React.Component {\n  constructor() {\n    super();\n    this.state = {\n      value: '',\n      currency: 'USD',\n      method: 'Dinheiro',\n      tag: 'Alimentação',\n      description: '',\n    };\n  }\n\n  handleChange = ({ target }) => {\n    const { name, value } = target;\n    this.setState({ [name]: value });\n  }\n\n  render() {\n    const { currencies, fetchCurrATM } = this.props;\n    const { value, currency, method, tag, description } = this.state;\n    const expensesInfo = { value, description, currency, method, tag };\n    return (\n      <div>\n        <form className={ styles.mainForm }>\n          <label htmlFor=\"value\">\n            Valor da despesa:\n            <input\n              type=\"number\"\n              id=\"value\"\n              data-testid=\"value-input\"\n              onChange={ this.handleChange }\n              name=\"value\"\n              value={ value }\n            />\n          </label>\n\n          <label htmlFor=\"moeda\">\n            Moeda:\n            <select\n              id=\"moeda\"\n              name=\"currency\"\n              value={ currency }\n              onChange={ this.handleChange }\n            >\n              { currencies.map((curr) => <option key={ curr }>{ curr }</option>) }\n            </select>\n          </label>\n\n          <label htmlFor=\"method\">\n            Método de pagamento:\n            <select\n              id=\"method\"\n              data-testid=\"method-input\"\n              name=\"method\"\n              value={ method }\n              onChange={ this.handleChange }\n            >\n              <option>Dinheiro</option>\n              <option>Cartão de crédito</option>\n              <option>Cartão de débito</option>\n            </select>\n          </label>\n\n          <label htmlFor=\"tag\">\n            Categoria:\n            <select\n              id=\"tag\"\n              data-testid=\"tag-input\"\n              name=\"tag\"\n              value={ tag }\n              onChange={ this.handleChange }\n            >\n              <option>Alimentação</option>\n              <option>Lazer</option>\n              <option>Trabalho</option>\n              <option>Transporte</option>\n              <option>Saúde</option>\n            </select>\n          </label>\n\n          <label htmlFor=\"description\">\n            Decrição:\n            <input\n              type=\"text\"\n              id=\"description\"\n              data-testid=\"description-input\"\n              placeholder=\"Descrição\"\n              onChange={ this.handleChange }\n              name=\"description\"\n              value={ description }\n            />\n          </label>\n          <button\n            type=\"button\"\n            onClick={ () => {\n              fetchCurrATM(expensesInfo);\n              this.setState({ value: '' });\n            } }\n          >\n            Adicionar despesa\n\n          </button>\n        </form>\n\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = (state) => ({\n  currencies: state.wallet.currencies,\n});\n\nconst mapDispatchToProps = (dispatch) => ({\n  fetchCurrATM: (expenses) => dispatch(fetchCurrencyATM(expenses)),\n});\n\nWalletForm.propTypes = {\n  currencies: propTypes.arrayOf(propTypes.any).isRequired,\n  fetchCurrATM: propTypes.func.isRequired,\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(WalletForm);\n","import React from 'react';\nimport propTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { removeExpense, editExpense } from '../actions';\nimport '../styles/WalletTable.module.css'\n\nclass WalletTable extends React.Component {\n  render() {\n    const { expenses, expenseRemover, editExp } = this.props;\n    return (\n      <table>\n        <tbody>\n          <tr>\n            <th>Descrição</th>\n            <th>Tag</th>\n            <th>Método de pagamento</th>\n            <th>Valor</th>\n            <th>Moeda</th>\n            <th>Câmbio utilizado</th>\n            <th>Valor convertido</th>\n            <th>Moeda de conversão</th>\n            <th>Editar/Excluir</th>\n          </tr>\n          { expenses.map((expItem) => (\n            <tr key={ expItem.id }>\n              <td>{ expItem.description }</td>\n              <td>{ expItem.tag }</td>\n              <td>{ expItem.method }</td>\n              <td>{ Number(expItem.value).toFixed(2) }</td>\n              <td>{ expItem.exchangeRates[expItem.currency].name }</td>\n              <td>{ Number(expItem.exchangeRates[expItem.currency].ask).toFixed(2) }</td>\n              <td>\n                { (Number(expItem.value)\n          * Number(expItem.exchangeRates[expItem.currency].ask)).toFixed(2) }\n              </td>\n              <td>Real</td>\n\n              <td>\n                <button\n                  type=\"button\"\n                  data-testid=\"edit-btn\"\n                  onClick={ () => editExp(expItem) }\n                >\n                  Editar\n\n                </button>\n                <button\n                  type=\"button\"\n                  data-testid=\"delete-btn\"\n                  onClick={ () => expenseRemover(expItem.id) }\n                >\n                  Excluir\n                </button>\n\n              </td>\n            </tr>\n          ))}\n        </tbody>\n      </table>\n    );\n  }\n}\n\nconst mapStateToProps = (state) => ({\n  expenses: state.wallet.expenses,\n});\n\nconst mapDispatchToProps = (dispatch) => ({\n  expenseRemover: (id) => dispatch(removeExpense(id)),\n  editExp: (exp) => dispatch(editExpense(exp)),\n});\n\nWalletTable.propTypes = {\n  expenses: propTypes.arrayOf(propTypes.any).isRequired,\n  expenseRemover: propTypes.func.isRequired,\n  editExp: propTypes.func.isRequired,\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(WalletTable);\n","import propTypes from 'prop-types';\nimport React from 'react';\nimport { connect } from 'react-redux';\nimport { fetchCurrencies } from '../actions';\nimport EditForm from '../components/EditForm';\nimport Header from '../components/Header';\nimport WalletForm from '../components/WalletForm';\nimport WalletTable from '../components/WalletTable';\n\nclass Wallet extends React.Component {\n  componentDidMount() {\n    const { fetchCurrency } = this.props;\n    fetchCurrency();\n  }\n\n  render() {\n    const { edit } = this.props;\n    return (\n      <div>\n        <Header />\n        { edit ? <EditForm /> : <WalletForm /> }\n        <WalletTable />\n      </div>);\n  }\n}\n\nconst mapStateToProps = (state) => ({\n  currencies: state.wallet.currencies,\n  edit: state.wallet.edit,\n});\n\nconst mapDispatchToProps = (dispatch) => ({\n  fetchCurrency: () => dispatch(fetchCurrencies()),\n});\n\nWallet.propTypes = {\n  fetchCurrency: propTypes.func.isRequired,\n  edit: propTypes.bool.isRequired,\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Wallet);\n","import React from 'react';\nimport { Route, Switch } from 'react-router-dom';\nimport Login from './pages/Login';\nimport Wallet from './pages/Wallet';\n\nfunction App() {\n  return (\n    <Switch>\n      <Route exact path=\"/\" component={ Login } />\n      <Route path=\"/carteira\" component={ Wallet } />\n    </Switch>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","// Esse reducer será responsável por tratar as informações da pessoa usuária\nconst INITIAL_STATE = {\n  email: '',\n};\n\nexport default function userReducer(state = INITIAL_STATE, action) {\n  switch (action.type) {\n  case 'GET_EMAIL':\n    return {\n      ...state,\n      email: action.payload,\n    };\n  default:\n    return state;\n  }\n}\n","// Esse reducer será responsável por tratar o todas as informações relacionadas as despesas\nconst INITIAL_STATE = {\n  currencies: [],\n  expenses: [],\n  edit: false,\n  currentEdit: {},\n};\n\nexport default function walletReducer(state = INITIAL_STATE, action) {\n  switch (action.type) {\n  case 'GET_CURRENCIES':\n    return {\n      ...state,\n      currencies: Object.keys(action.payload).filter((curr) => curr !== 'USDT'),\n    };\n  case 'GET_EXPENSES':\n    return {\n      ...state,\n      expenses: [...state.expenses, { id: state.expenses.length, ...action.payload }],\n    };\n  case 'REMOVE_EXPENSE':\n    return {\n      ...state,\n      expenses: [...state.expenses.filter((expense) => expense.id !== action.id)],\n    };\n  case 'EDIT_EXPENSE':\n    return {\n      ...state,\n      edit: true,\n      currentEdit: action.expItem,\n    };\n  case 'UPDATE_EXPENSE':\n    return {\n      ...state,\n      edit: false,\n      currentEdit: {},\n      expenses: state.expenses.map((exp) => {\n        if (exp.id === action.payload.id) return action.payload;\n        return exp;\n      }),\n    };\n  default:\n    return state;\n  }\n}\n","import { combineReducers } from 'redux';\nimport userReducer from './user';\nimport walletReducer from './wallet';\n\nconst rootReducer = combineReducers({ user: userReducer, wallet: walletReducer });\n\nexport default rootReducer;\n","import { createStore, applyMiddleware } from 'redux';\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport thunk from 'redux-thunk';\nimport reducer from '../reducers';\n\nconst store = createStore(\n  reducer,\n  composeWithDevTools(\n    applyMiddleware(thunk),\n  ),\n);\n\nexport default store;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { BrowserRouter } from 'react-router-dom';\nimport './index.css';\nimport { Provider } from 'react-redux';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport store from './store';\n\nReactDOM.render(\n  <Provider store={ store }>\n    <BrowserRouter basename={process.env.PUBLIC_URL}>\n      <App />\n    </BrowserRouter>\n  </Provider>,\n  document.getElementById('root'),\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}